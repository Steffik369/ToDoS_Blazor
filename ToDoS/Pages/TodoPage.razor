@page "/todo"

@inject ITodoViewModel todoListViewModel
@using System.ComponentModel
@implements IDisposable

<div class="mainBody">
    <CascadingValue Value=@todoListViewModel Name="todoListViewModel">
        <TodoListComponent DisplayedItemsStatus="ItemStatus.Todo"/>
        <TodoListComponent DisplayedItemsStatus="ItemStatus.Completed"/>
        <TodoListAddComponent />
    </CascadingValue>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        todoListViewModel.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
        await base.OnInitializedAsync();
    }

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        todoListViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }
}


<style>
    .mainBody {
        min-height: 100vh;
        background-image: url(/Images/green.png);
        background-repeat: no-repeat;
        background-size: cover;
        background-attachment: fixed;
    }

</style>